{"name": "test_file_upload[chrome]", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.InvalidArgumentException: Message: invalid argument: File not found : C:\\Users\\Ascendion\\OneDrive\\Documents\\sql.txt\n  (Session info: chrome=141.0.7390.108)\nStacktrace:\n\tGetHandleVerifier [0x0x7ff62a13e8e5+80021]\n\tGetHandleVerifier [0x0x7ff62a13e940+80112]\n\t(No symbol) [0x0x7ff629ec060f]\n\t(No symbol) [0x0x7ff629f102a7]\n\t(No symbol) [0x0x7ff629f4122a]\n\t(No symbol) [0x0x7ff629f0b056]\n\t(No symbol) [0x0x7ff629f41440]\n\t(No symbol) [0x0x7ff629f6968a]\n\t(No symbol) [0x0x7ff629f41003]\n\t(No symbol) [0x0x7ff629f095d1]\n\t(No symbol) [0x0x7ff629f0a3f3]\n\tGetHandleVerifier [0x0x7ff62a3fdc7d+2960429]\n\tGetHandleVerifier [0x0x7ff62a3f7f3a+2936554]\n\tGetHandleVerifier [0x0x7ff62a418977+3070247]\n\tGetHandleVerifier [0x0x7ff62a1583ce+185214]\n\tGetHandleVerifier [0x0x7ff62a15fe1f+216527]\n\tGetHandleVerifier [0x0x7ff62a147b24+117460]\n\tGetHandleVerifier [0x0x7ff62a147cdf+117903]\n\tGetHandleVerifier [0x0x7ff62a12dbb8+11112]\n\tBaseThreadInitThunk [0x0x7ffdd486e8d7+23]\n\tRtlUserThreadStart [0x0x7ffdd636c53c+44]", "trace": "setup_driver = (<selenium.webdriver.chrome.webdriver.WebDriver (session=\"840e53786c858dd9466afbc1d41bb1fd\")>, 'chrome')\n\n    @pytest.mark.order(8)\n    def test_file_upload(setup_driver):\n        driver, browser_name = setup_driver\n        print(f\"\\n=== TEST: File Upload on {browser_name.upper()} ===\")\n    \n        driver.get(\"https://demoqa.com/upload-download\")\n        wait = WebDriverWait(driver, 20)\n        remove_ads(driver)\n    \n        # ðŸ”§ Make sure this file path exists on your system\n        test_file = r\"C:\\Users\\Ascendion\\OneDrive\\Documents\\sql.txt\"\n    \n        upload_input = wait.until(EC.presence_of_element_located((By.ID, \"uploadFile\")))\n>       upload_input.send_keys(test_file)\n\ntests\\test_demoqa.py:137: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:230: in send_keys\n    self._execute(\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:394: in _execute\n    return self._parent.execute(command, params)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:344: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000023345072850>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"invalid argument\",\"message\":\"invalid argument: File not found : C:\\\\\\\\Use...ff62a12dbb8+11112]\\\\n\\\\tBaseThreadInitThunk [0x0x7ffdd486e8d7+23]\\\\n\\\\tRtlUserThreadStart [0x0x7ffdd636c53c+44]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidArgumentException: Message: invalid argument: File not found : C:\\Users\\Ascendion\\OneDrive\\Documents\\sql.txt\nE         (Session info: chrome=141.0.7390.108)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x7ff62a13e8e5+80021]\nE       \tGetHandleVerifier [0x0x7ff62a13e940+80112]\nE       \t(No symbol) [0x0x7ff629ec060f]\nE       \t(No symbol) [0x0x7ff629f102a7]\nE       \t(No symbol) [0x0x7ff629f4122a]\nE       \t(No symbol) [0x0x7ff629f0b056]\nE       \t(No symbol) [0x0x7ff629f41440]\nE       \t(No symbol) [0x0x7ff629f6968a]\nE       \t(No symbol) [0x0x7ff629f41003]\nE       \t(No symbol) [0x0x7ff629f095d1]\nE       \t(No symbol) [0x0x7ff629f0a3f3]\nE       \tGetHandleVerifier [0x0x7ff62a3fdc7d+2960429]\nE       \tGetHandleVerifier [0x0x7ff62a3f7f3a+2936554]\nE       \tGetHandleVerifier [0x0x7ff62a418977+3070247]\nE       \tGetHandleVerifier [0x0x7ff62a1583ce+185214]\nE       \tGetHandleVerifier [0x0x7ff62a15fe1f+216527]\nE       \tGetHandleVerifier [0x0x7ff62a147b24+117460]\nE       \tGetHandleVerifier [0x0x7ff62a147cdf+117903]\nE       \tGetHandleVerifier [0x0x7ff62a12dbb8+11112]\nE       \tBaseThreadInitThunk [0x0x7ffdd486e8d7+23]\nE       \tRtlUserThreadStart [0x0x7ffdd636c53c+44]\n\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: InvalidArgumentException"}, "attachments": [{"name": "stdout", "source": "3ebc0ced-9e5c-47f9-a3bd-2d77058d42ba-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "setup_driver", "value": "'chrome'"}], "start": 1761138586300, "stop": 1761138607813, "uuid": "a6caac0d-1464-4059-8aa4-a0bf3ccd38b7", "historyId": "dd4f1ea75b758592c92da45d50369509", "testCaseId": "d0694cb8f427a30667e276587fa27cbb", "fullName": "tests.test_demoqa#test_file_upload", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_demoqa"}, {"name": "host", "value": "ASCENDI-VC9THP6"}, {"name": "thread", "value": "4624-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_demoqa"}], "titlePath": ["tests", "test_demoqa.py"]}