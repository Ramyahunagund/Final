{"name": "test_add_to_cart[chrome]", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.UnexpectedAlertPresentException: Alert Text: User does not exist.\nMessage: unexpected alert open: {Alert text : User does not exist.}\n  (Session info: chrome=141.0.7390.108)\nStacktrace:\n\tGetHandleVerifier [0x0x7ff62a13e8e5+80021]\n\tGetHandleVerifier [0x0x7ff62a13e940+80112]\n\t(No symbol) [0x0x7ff629ec060f]\n\t(No symbol) [0x0x7ff629f6a131]\n\t(No symbol) [0x0x7ff629f41003]\n\t(No symbol) [0x0x7ff629f095d1]\n\t(No symbol) [0x0x7ff629f0a3f3]\n\tGetHandleVerifier [0x0x7ff62a3fdc7d+2960429]\n\tGetHandleVerifier [0x0x7ff62a3f7f3a+2936554]\n\tGetHandleVerifier [0x0x7ff62a418977+3070247]\n\tGetHandleVerifier [0x0x7ff62a1583ce+185214]\n\tGetHandleVerifier [0x0x7ff62a15fe1f+216527]\n\tGetHandleVerifier [0x0x7ff62a147b24+117460]\n\tGetHandleVerifier [0x0x7ff62a147cdf+117903]\n\tGetHandleVerifier [0x0x7ff62a12dbb8+11112]\n\tBaseThreadInitThunk [0x0x7ffdd486e8d7+23]\n\tRtlUserThreadStart [0x0x7ffdd636c53c+44]", "trace": "logged_in_driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"6f9774f28d8b6175d5bf0c2a72c2a0a1\")>\n\n    @pytest.mark.order(3)\n    def test_add_to_cart(logged_in_driver):\n        driver = logged_in_driver\n        wait = WebDriverWait(driver, 10)\n        actions = ActionChains(driver)\n    \n        print(\"\\n=== Starting Add to Cart Test ===\")\n>       driver.get(\"https://www.demoblaze.com\")\n\ntests\\test_add_to_cart.py:17: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:353: in get\n    self.execute(Command.GET, {\"url\": url})\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:344: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000027DC6E9C980>\nresponse = {'status': 500, 'value': '{\"value\":{\"data\":{\"text\":\"User does not exist.\"},\"error\":\"unexpected alert open\",\"message\":\"...ff62a12dbb8+11112]\\\\n\\\\tBaseThreadInitThunk [0x0x7ffdd486e8d7+23]\\\\n\\\\tRtlUserThreadStart [0x0x7ffdd636c53c+44]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n>           raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nE           selenium.common.exceptions.UnexpectedAlertPresentException: Alert Text: User does not exist.\nE           Message: unexpected alert open: {Alert text : User does not exist.}\nE             (Session info: chrome=141.0.7390.108)\nE           Stacktrace:\nE           \tGetHandleVerifier [0x0x7ff62a13e8e5+80021]\nE           \tGetHandleVerifier [0x0x7ff62a13e940+80112]\nE           \t(No symbol) [0x0x7ff629ec060f]\nE           \t(No symbol) [0x0x7ff629f6a131]\nE           \t(No symbol) [0x0x7ff629f41003]\nE           \t(No symbol) [0x0x7ff629f095d1]\nE           \t(No symbol) [0x0x7ff629f0a3f3]\nE           \tGetHandleVerifier [0x0x7ff62a3fdc7d+2960429]\nE           \tGetHandleVerifier [0x0x7ff62a3f7f3a+2936554]\nE           \tGetHandleVerifier [0x0x7ff62a418977+3070247]\nE           \tGetHandleVerifier [0x0x7ff62a1583ce+185214]\nE           \tGetHandleVerifier [0x0x7ff62a15fe1f+216527]\nE           \tGetHandleVerifier [0x0x7ff62a147b24+117460]\nE           \tGetHandleVerifier [0x0x7ff62a147cdf+117903]\nE           \tGetHandleVerifier [0x0x7ff62a12dbb8+11112]\nE           \tBaseThreadInitThunk [0x0x7ffdd486e8d7+23]\nE           \tRtlUserThreadStart [0x0x7ffdd636c53c+44]\n\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:228: UnexpectedAlertPresentException"}, "attachments": [{"name": "stdout", "source": "7691a761-b14f-41ab-b7c6-5f9d12b961a6-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "logged_in_driver", "value": "'chrome'"}], "start": 1761140091623, "stop": 1761140091693, "uuid": "fdcfd7e3-041f-44d1-8e57-01fe3c17c0ee", "historyId": "9d1b0b1d2d0310ca0df4ca8f178a6ba0", "testCaseId": "a65fce4e70cb5afd8c0f8bcce4c3e27a", "fullName": "tests.test_add_to_cart#test_add_to_cart", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_add_to_cart"}, {"name": "host", "value": "ASCENDI-VC9THP6"}, {"name": "thread", "value": "10528-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_add_to_cart"}], "titlePath": ["tests", "test_add_to_cart.py"]}